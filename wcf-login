#!/usr/bin/php
<?php

/*
 * ejabberd auth script, integration with Woltlab Community Framework
 *
 * written by Torben Brodt <t.brodt@gmail.com>
 * Version: 0.5
 * Date: 2009-01-11
 * 
 * published under GPL
 *
 * Latest version of this script is available at:
 * http://trac.easy-coding.de/trac/wcf/wiki/Jabber
 *
 * Installation:
 *	- create a new mysql user which only needs to select your wcf user table
 *	  $ mysql -u root -p YOUR_DB_NAME
 *	  Enter password: *******
 *	  mysql> GRANT select ON wcf1_user TO ejabberd IDENTIFIED BY 'geheimespasswort';
 *
 *	  (if your WCF DB name or table prefix differs, change above lines)
 *
 *	- Place this script somewhere on your filesystem, ie. /var/lib/ejabberd
 *	  (the full path would then be /var/lib/ejabberd/wcf-login)
 *
 *	- Change variables below to fit your setup
 *
 *	- Change it's owner to whichever user is running the server, ie. ejabberd
 *	  $ chown ejabberd:ejabberd /var/lib/ejabberd/wcf-login
 *
 * 	- Change the access mode so it is readable only to the user ejabberd and has exec
 *	  $ chmod 700 /var/lib/ejabberd/wcf-login
 *
 *	- Edit your ejabberd.cfg file, comment out your auth_method and add:
 *	  {auth_method, external}.
 *	  {extauth_program, "/var/lib/ejabberd/wcf-login"}.
 *
 *	- Restart your ejabberd service, you should be able to login with your wcf auth info
 *
 * Other hints:
 *	- if your users have a space or a @ in their username, they'll run into trouble
 *	  registering with any client so they should be instructed to replace these chars
 *	  " " (space) is replaced with "%20"
 *	  "@" is replaced with "(a)"
 *
 */

// MySQL user which is used to connect to DB server
$sDBUser 	= "ejabberd";

// MySQL password for the above user
$sDBPassword 	= "geheimespasswort";

// MySQL location, in 99% this is correct
$sDBHost 	= "localhost";

// MySQL DB name in which your wcf CMS is installed
$sDBName	= "YOUR_DB_NAME";


// wcf globals
define('ENCRYPTION_METHOD', 'sha1'); // md5|sha1|...
define('ENCRYPTION_SALT_POSITION', 'after'); // before|after
define('ENCRYPTION_ENABLE_SALTING', true); // true|false
define('ENCRYPTION_ENCRYPT_BEFORE_SALTING', true); // true|false
define('WCF_N', "1"); // true|false
define('CHARSET', "UTF-8"); // true|false

// the logfile to which to write, should be writeable by the user which is running the server
$sLogFile 	= "/var/log/ejabberd/wcfAuth.log";

// set true to debug if needed
$bDebug		= false;

error_reporting(0);
$oAuth = new wcfAuth($sDBUser, $sDBPassword, $sDBHost, $sDBName, $sLogFile, $bDebug);

class wcfAuth
{
	private $sDBUser;
	private $sDBPassword;
	private $sDBHost;
	private $sDBName;
	private $sLogFile;

	private $bDebug;

	private $oMySQL;
	private $rLogFile;
	
	public function __construct($sDBUser, $sDBPassword, $sDBHost, $sDBName, $sLogFile, $bDebug)
	{
		// setter
		$this->sDBUser 		= $sDBUser;
		$this->sDBPassword 	= $sDBPassword;
		$this->sDBHost 		= $sDBHost;
		$this->sDBName 		= $sDBName;
		$this->sLogFile 	= $sLogFile;
		$this->bDebug		= $bDebug;
		
		// ovo ne provjeravamo jer ako ne mozes kreirati log file, onda si u kvascu :)
		$this->rLogFile = fopen($this->sLogFile, "a") or die("Error opening log file: ". $this->sLogFile);

		$this->writeLog("[wcfAuth] start");
		$this->dbconnect();

		// ovdje bi trebali biti spojeni na MySQL, imati otvoren log i zavrtit cekalicu
		do {
			$iHeader	= fgets(STDIN, 3);
			$aLength 	= unpack("n", $iHeader);
			$iLength	= $aLength["1"];
			if($iLength > 0) {
				// ovo znaci da smo nesto dobili
				$sData = fgets(STDIN, $iLength + 1);
				if (CHARSET != "UTF-8") {
					$sData = iconv("UTF-8", CHARSET, $sData);
				}
				$this->writeDebugLog("[debug] received data: ". $sData);
				$aCommand = explode(":", $sData);
				if (is_array($aCommand)){
					switch ($aCommand[0]){
						case "isuser":
							// provjeravamo je li korisnik dobar
							if (!isset($aCommand[1])){
								$this->writeLog("[wcfAuth] invalid isuser command, no username given");
								fwrite(STDOUT, pack("nn", 2, 0));
							} else {
								// ovdje provjeri je li korisnik OK
								$this->dbverify();
								$sUser = str_replace(array("%20", "(a)"), array(" ", "@"), $aCommand[1]);
								$this->writeDebugLog("[debug] checking isuser for ". $sUser);
								$sQuery = "SELECT * FROM wcf". WCF_N ."_user WHERE username='". $this->oMySQL->escape_string($sUser) ."'";
								$this->writeDebugLog("[debug] using query ". $sQuery);
								if ($oResult = $this->oMySQL->query($sQuery)){
									if ($oResult->num_rows) {
										// korisnik OK
										$this->writeLog("[wcfAuth] valid user: ". $sUser);
										fwrite(STDOUT, pack("nn", 2, 1));
									} else {
										// korisnik nije OK
										$this->writeLog("[wcfAuth] invalid user: ". $sUser);
										fwrite(STDOUT, pack("nn", 2, 0));
									}
									$oResult->close();
								} else {
									$this->writeLog("[MySQL] invalid query: ". $sQuery);
									fwrite(STDOUT, pack("nn", 2, 0));
								}
							}
						break;
						case "auth":
							// provjeravamo autentifikaciju korisnika
							if (sizeof($aCommand) != 4){
								$this->writeLog("[wcfAuth] invalid auth command, data missing");
								fwrite(STDOUT, pack("nn", 2, 0));
							} else {
								// ovdje provjeri prijavu
								$this->dbverify();
								$sUser = str_replace(array("%20", "(a)"), array(" ", "@"), $aCommand[1]);
								$this->writeDebugLog("[debug] doing auth for ". $sUser);
								$sQuery = "
									SELECT		userID
									FROM 		wcf". WCF_N ."_user
									WHERE 		username='". $this->oMySQL->escape_string($sUser) ."'
									AND (
										password = md5(
											CONCAT(salt, md5(
												CONCAT(salt, md5('". $this->oMySQL->escape_string($aCommand[3]) ."'))
											))
										)
									OR 	md5(CONCAT(password, salt)) = '". $this->oMySQL->escape_string($aCommand[3]) ."'
									)";
								$this->writeDebugLog("[debug] using query ". preg_replace("/\('[^']+'\)/",'(***)',$sQuery));
								if ($oResult = $this->oMySQL->query($sQuery)){
									if ($oResult->num_rows) {
										// korisnik OK
										$this->writeLog("[wcfAuth] authentificated user ". $sUser ."@". $aCommand[2]);
										fwrite(STDOUT, pack("nn", 2, 1));
									} else {
										// korisnik nije OK
										$this->writeLog("[wcfAuth] authentification failed for user ". $sUser ."@". $aCommand[2]);
										fwrite(STDOUT, pack("nn", 2, 0));
									}
									$oResult->close();
								} else {
									$this->writeLog("[MySQL] invalid query: ". $sQuery);
									fwrite(STDOUT, pack("nn", 2, 0));
								}
							}
						break;
						case "setpass":
							// postavljanje zaporke, onemoguceno
							$this->writeLog("[wcfAuth] setpass command disabled");
							fwrite(STDOUT, pack("nn", 2, 0));
						break;
						default:
							// ako je uhvaceno ista drugo
							$this->writeLog("[wcfAuth] unknown command ". $aCommand[0]);
							fwrite(STDOUT, pack("nn", 2, 0));
						break;
					}
				} else {
					$this->writeDebugLog("[debug] invalid command string");
					fwrite(STDOUT, pack("nn", 2, 0));
				}
			}
			unset ($iHeader);
			unset ($aLength);
			unset ($iLength);
			unset($aCommand);
		} while (true);
	}

	public function __destruct()
	{
		// zatvori log file
		$this->writeLog("[wcfAuth] stop");
		
		if (is_resource($this->rLogFile)){
			fclose($this->rLogFile);
		}
		// zatvori MySQLi vezu
		if (is_object($this->oMySQL)){
			$this->oMySQL->close();
		}
		
	}

	private function writeLog($sMessage)
	{
		if (is_resource($this->rLogFile)) {
			fwrite($this->rLogFile, date("r") ." ". $sMessage ."\n");
		}
	}

	private function writeDebugLog($sMessage)
	{
		if ($this->bDebug){
			$this->writeLog($sMessage);
		}
	}

	private function dbconnect(){
		if (!is_object($this->oMySQL)){
			$this->oMySQL = new mysqli($this->sDBHost, $this->sDBUser, $this->sDBPassword, $this->sDBName);
			if (mysqli_connect_errno()) {
				$this->writeLog(sprintf("[MySQL] connection failed: %s\n", mysqli_connect_error()));
				$this->writeLog("[wcfAuth] killing");
				exit();
			} else {
				$this->writeLog("[MySQL] connected");
			}
		}
	}

	private function dbverify(){
		if (!is_object($this->oMySQL)){
			$this->dbconnect();
		} else {
			if (!$this->oMySQL->ping()){
				unset($this->oMySQL);	// ubijamo nekoristan objekt
				$this->writeLog("[MySQL] connection died, reconnecting");
				$this->dbconnect();
			}
		}
	}
}
?>
